package io.mycat.mycat2.bufferTest;

import io.mycat.mycat2.AbstractMySQLSession;
import io.mycat.mycat2.beans.MySQLPackageInf;
import io.mycat.mysql.packet.ResultSetHeaderPacket;
import io.mycat.proxy.ProxyBuffer;
import io.mycat.util.StringUtil;
import org.junit.Assert;
import org.junit.Test;

import java.nio.ByteBuffer;

public class MySQLPackageInfTest {

    public static AbstractMySQLSession mock(ProxyBuffer proxyBuffer) {
        AbstractMySQLSession sqlSession = new AbstractMySQLSession() {
            @Override
            protected void doTakeReadOwner() {
            }
        };
        sqlSession.proxyBuffer = proxyBuffer;
        sqlSession.curMSQLPackgInf = new MySQLPackageInf();
        return sqlSession;
    }

    @Test
    public void testFullPacket() {
        ResultSetHeaderPacket headerPacket = new ResultSetHeaderPacket();
        headerPacket.fieldCount = 0;
        headerPacket.extra = 0;
        headerPacket.packetId = 0;
        ByteBuffer allocate = ByteBuffer.allocate(128);
        ProxyBuffer proxyBuffer = new ProxyBuffer(allocate);
        headerPacket.write(proxyBuffer);
        AbstractMySQLSession mySQLSession = mock(proxyBuffer);
        AbstractMySQLSession.CurrPacketType currPacketType = mySQLSession.resolveMySQLPackage();
        Assert.assertEquals(currPacketType, AbstractMySQLSession.CurrPacketType.Full);
        Assert.assertTrue(mySQLSession.curMSQLPackgInf.isFiledCount());
    }

    @Test
    public void testPrepareStatementResponse() {
        ByteBuffer buffer = ByteBuffer.allocate(8192);
        ProxyBuffer proxyBuffer = new ProxyBuffer(buffer);
        for (int i : peer1_23) {
            proxyBuffer.writeByte((byte) i);
        }

        AbstractMySQLSession mySQLSession = mock(proxyBuffer);
        while (mySQLSession.isResolveMySQLPackageFinished()) {
            AbstractMySQLSession.CurrPacketType currPacketType = mySQLSession.resolveMySQLPackage();
            Assert.assertEquals(currPacketType, AbstractMySQLSession.CurrPacketType.Full);
            System.out.println(StringUtil.dumpAsHex(mySQLSession.proxyBuffer.getBuffer(), mySQLSession.curMSQLPackgInf.startPos, mySQLSession.curMSQLPackgInf.pkgLength));
        }

    }


    int[] peer1_23 = new int[]{ /* Packet 175628 */
            0x0c, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
            0x17, 0x00, 0x00, 0x02, 0x03, 0x64, 0x65, 0x66,
            0x00, 0x00, 0x00, 0x01, 0x3f, 0x00, 0x0c, 0x3f,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x80, 0x00,
            0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x03, 0x03,
            0x64, 0x65, 0x66, 0x00, 0x00, 0x00, 0x01, 0x3f,
            0x00, 0x0c, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xfd, 0x80, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00,
            0x00, 0x04, 0x03, 0x64, 0x65, 0x66, 0x00, 0x00,
            0x00, 0x01, 0x3f, 0x00, 0x0c, 0x3f, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xfd, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x17, 0x00, 0x00, 0x05, 0x03, 0x64, 0x65,
            0x66, 0x00, 0x00, 0x00, 0x01, 0x3f, 0x00, 0x0c,
            0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x80,
            0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x06,
            0x03, 0x64, 0x65, 0x66, 0x00, 0x00, 0x00, 0x01,
            0x3f, 0x00, 0x0c, 0x3f, 0x00, 0x00, 0x00, 0x00,
            0x00, 0xfd, 0x80, 0x00, 0x00, 0x00, 0x00, 0x17,
            0x00, 0x00, 0x07, 0x03, 0x64, 0x65, 0x66, 0x00,
            0x00, 0x00, 0x01, 0x3f, 0x00, 0x0c, 0x3f, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xfd, 0x80, 0x00, 0x00,
            0x00, 0x00, 0x17, 0x00, 0x00, 0x08, 0x03, 0x64,
            0x65, 0x66, 0x00, 0x00, 0x00, 0x01, 0x3f, 0x00,
            0x0c, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd,
            0x80, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00,
            0x09, 0x03, 0x64, 0x65, 0x66, 0x00, 0x00, 0x00,
            0x01, 0x3f, 0x00, 0x0c, 0x3f, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xfd, 0x80, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x0a, 0xfe, 0x00, 0x00, 0x02,
            0x00};

}
